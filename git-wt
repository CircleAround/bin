#!/usr/bin/env bash
# git-wt  ‚îÄ manage worktrees at ../<repo>.worktrees/<number>
set -euo pipefail

usage() {
  cat << 'EOF'
Usage: git-wt [command] [args]

Commands:
  git-wt add <branch>  Create worktree with branch
  git-wt pop [num]     Remove worktree by number (defaults to highest)
  git-wt               Show interactive menu

Examples:
  git-wt add feature-x  Create worktree in directory "1" with branch "feature-x"
  git-wt pop            Remove highest numbered worktree
  git-wt pop 2          Remove worktree directory "2"
  git-wt                Interactive menu with add/pop/help/exit options
EOF
  exit 1
}

# Sanitize branch name to prevent injection attacks
sanitize_branch_name() {
  local branch="$1"
  # Remove dangerous characters and validate
  if [[ "$branch" =~ [^a-zA-Z0-9._/-] ]]; then
    echo "‚ùå Branch name contains invalid characters. Use only: a-z A-Z 0-9 . _ / -" >&2
    exit 1
  fi
  if [[ "$branch" =~ ^[.-] || "$branch" =~ [.-]$ || "$branch" =~ // ]]; then
    echo "‚ùå Invalid branch name format" >&2
    exit 1
  fi
}

# Find the maximum numbered worktree directory
find_max_worktree_num() {
  local max_num=0
  [[ -d "$wroot" ]] || return 1
  
  # Enable nullglob to handle case where no files match pattern
  local nullglob_was_set=false
  shopt -q nullglob && nullglob_was_set=true
  shopt -s nullglob
  
  for dir in "$wroot"/*; do
    [[ -d "$dir" ]] || continue
    local num=$(basename "$dir")
    [[ "$num" =~ ^[1-9]$ ]] && ((num > max_num)) && max_num=$num
  done
  
  # Restore original nullglob setting
  $nullglob_was_set || shopt -u nullglob
  
  [[ $max_num -eq 0 ]] && return 1
  echo "$max_num"
}

# Safely remove worktrees directory if it only contains numbered directories
cleanup_worktrees_dir() {
  [[ -d "$wroot" ]] || return 0
  
  # Check if directory contains only numbered directories (1-9) or is empty
  local has_non_numbered=false
  local has_anything=false
  
  for item in "$wroot"/*; do
    [[ -e "$item" ]] || continue
    has_anything=true
    
    local basename_item=$(basename "$item")
    if [[ ! "$basename_item" =~ ^[1-9]$ ]] || [[ ! -d "$item" ]]; then
      has_non_numbered=true
      break
    fi
  done
  
  if [[ "$has_non_numbered" == true ]]; then
    echo "‚ö†Ô∏è Cannot remove worktrees directory: contains non-numbered files/directories" >&2
    echo "   Please manually clean: $wroot" >&2
    return 1
  elif [[ "$has_anything" == false ]]; then
    # Directory is empty, safe to remove
    rmdir "$wroot"
    echo "üóëÔ∏è Removed empty worktrees directory: $wroot"
    return 0
  fi
  
  # Has numbered directories, don't remove
  return 0
}

# Create new worktree with given branch name
create_worktree() {
  local branch="$1"
  
  # Sanitize branch name
  sanitize_branch_name "$branch"
  
  # Find next available number (maximum 9)
  local next_num=1
  while [[ $next_num -le 9 && -e "$wroot/$next_num" ]]; do
    ((next_num++))
  done
  
  if [[ $next_num -gt 9 ]]; then
    echo "‚ùå Maximum 9 worktrees allowed. Please remove one first with: git-wt pop" >&2
    exit 1
  fi
  
  local target="$wroot/$next_num"
  mkdir -p "$wroot"
  
  # Track if branch exists remotely, otherwise create new
  if git show-ref --verify --quiet "refs/heads/$branch"; then
    git worktree add "$target" "$branch" || { rmdir "$target" 2>/dev/null; exit 1; }
  elif git ls-remote --exit-code --heads origin "$branch" &>/dev/null; then
    git worktree add "$target" "origin/$branch" || { rmdir "$target" 2>/dev/null; exit 1; }
  else
    git worktree add -b "$branch" "$target" || { rmdir "$target" 2>/dev/null; exit 1; }
  fi
  
  echo "‚úÖ Worktree created: $target (branch: $branch)"
  git worktree list
  
  # Show command to navigate to new directory
  echo ""
  echo "üìÅ To navigate to the new directory:"
  echo "cd \"$target\""
}

# ‚ë† Check if this is a Git repository
git rev-parse --is-inside-work-tree &>/dev/null || {
  echo "‚ùå Not a Git repository" >&2; exit 1; }

# ‚ë° Calculate paths (common)
root="$(git rev-parse --show-toplevel)"
repo="$(basename "$root")"
wroot="$root/../${repo}.worktrees"

# ‚ë¢ Subcommand processing
command="${1-}"
case "$command" in
  -h|--help) usage ;;
  pop)
    shift
    # pop subcommand processing
    target_num="${1-}"
    
    # Check if worktree directory exists
    [[ -d "$wroot" ]] || { echo "‚ùå Worktree directory does not exist: $wroot"; exit 1; }
    
    # If no number specified, find the maximum number
    if [[ -z "$target_num" ]]; then
      if ! target_num=$(find_max_worktree_num); then
        echo "‚ùå No removable worktree found"
        exit 1
      fi
    fi
    
    target="$wroot/$target_num"
    [[ -d "$target" ]] || { echo "‚ùå Worktree does not exist: $target"; exit 1; }
    
    # Remove worktree
    git worktree remove "$target"
    echo "‚úÖ Worktree removed: $target"
    
    # Safely cleanup worktrees directory
    cleanup_worktrees_dir
    
    git worktree list
    ;;
  add)
    shift
    # add subcommand processing
    branch="${1-}"
    [[ -z "$branch" ]] && { echo "‚ùå Please specify branch name: git-wt add <branch>"; exit 1; }
    create_worktree "$branch"
    ;;
  "")
    # No arguments: show selection menu
    echo "Please select a command:"
    echo "a. add - Create new worktree"
    echo "p. pop - Remove existing worktree"
    echo "h. help - Show usage information"
    echo "q. quit - Quit without action"
    echo ""
    read -rp "Choice [a/p/h/q]: " choice
    
    case "$choice" in
      a|A)
        read -rp "Enter branch name: " branch
        [[ -z "$branch" ]] && { echo "‚ùå Branch name is empty"; exit 1; }
        create_worktree "$branch"
        ;;
      p|P)
        # Check if worktree directory exists
        [[ -d "$wroot" ]] || { echo "‚ùå Worktree directory does not exist: $wroot"; exit 1; }
        
        # Find maximum number
        if ! max_num=$(find_max_worktree_num); then
          echo "‚ùå No removable worktree found"
          exit 1
        fi
        
        target="$wroot/$max_num"
        git worktree remove "$target"
        echo "‚úÖ Worktree removed: $target"
        
        # Safely cleanup worktrees directory
        cleanup_worktrees_dir
        
        git worktree list
        ;;
      h|H)
        usage
        ;;
      q|Q)
        echo "üëã Goodbye!"
        exit 0
        ;;
      *)
        echo "‚ùå Invalid selection"
        exit 1
        ;;
    esac
    ;;
  *)
    # Unknown subcommand
    echo "‚ùå Unknown subcommand: $command"
    usage
    ;;
esac

