#!/usr/bin/env bash
# git-wt  ‚îÄ manage worktrees at ../<repo>.worktrees/<number>
set -euo pipefail

usage() {
  cat << 'EOF'
Usage: git-wt [command] [args]

Commands:
  git-wt add <branch>  Create worktree with branch
  git-wt pop [num]     Remove worktree by number (defaults to highest)

Examples:
  git-wt add feature-x  Create worktree in directory "1" with branch "feature-x"
  git-wt pop            Remove highest numbered worktree
  git-wt pop 2          Remove worktree directory "2"
EOF
  exit 1
}

# ‚ë† Check if this is a Git repository
git rev-parse --is-inside-work-tree &>/dev/null || {
  echo "‚ùå Not a Git repository" >&2; exit 1; }

# ‚ë° Calculate paths (common)
root="$(git rev-parse --show-toplevel)"
repo="$(basename "$root")"
wroot="$root/../${repo}.worktrees"

# ‚ë¢ Subcommand processing
command="${1-}"
case "$command" in
  -h|--help) usage ;;
  pop)
    shift
    # pop subcommand processing
    target_num="${1-}"
    
    # Check if worktree directory exists
    [[ -d "$wroot" ]] || { echo "‚ùå Worktree directory does not exist: $wroot"; exit 1; }
    
    # If no number specified, find the maximum number
    if [[ -z "$target_num" ]]; then
      max_num=0
      for dir in "$wroot"/*; do
        [[ -d "$dir" ]] || continue
        num=$(basename "$dir")
        [[ "$num" =~ ^[0-9]+$ ]] && ((num > max_num)) && max_num=$num
      done
      [[ $max_num -eq 0 ]] && { echo "‚ùå No removable worktree found"; exit 1; }
      target_num=$max_num
    fi
    
    target="$wroot/$target_num"
    [[ -d "$target" ]] || { echo "‚ùå Worktree does not exist: $target"; exit 1; }
    
    # Remove worktree
    git worktree remove "$target"
    echo "‚úÖ Worktree removed: $target"
    git worktree list
    ;;
  add)
    shift
    # add subcommand processing
    branch="${1-}"
    [[ -z "$branch" ]] && { echo "‚ùå Please specify branch name: git-wt add <branch>"; exit 1; }
    
    # Find next available number
    next_num=1
    while [[ -e "$wroot/$next_num" ]]; do
      ((next_num++))
    done
    target="$wroot/$next_num"
    
    mkdir -p "$wroot"
    
    # Track if branch exists remotely, otherwise create new
    if git show-ref --verify --quiet "refs/heads/$branch"; then
      git worktree add "$target" "$branch"
    elif git ls-remote --exit-code --heads origin "$branch" &>/dev/null; then
      git worktree add "$target" "origin/$branch"
    else
      git worktree add -b "$branch" "$target"
    fi
    
    echo "‚úÖ Worktree created: $target (branch: $branch)"
    git worktree list
    
    # Show command to navigate to new directory
    echo ""
    echo "üìÅ To navigate to the new directory:"
    echo "cd \"$target\""
    ;;
  "")
    # No arguments: show selection menu
    echo "Please select a command:"
    echo "1. add - Create new worktree"
    echo "2. pop - Remove existing worktree"
    echo ""
    read -rp "Choice [1-2]: " choice
    
    case "$choice" in
      1)
        read -rp "Enter branch name: " branch
        [[ -z "$branch" ]] && { echo "‚ùå Branch name is empty"; exit 1; }
        
        # Find next available number
        next_num=1
        while [[ -e "$wroot/$next_num" ]]; do
          ((next_num++))
        done
        target="$wroot/$next_num"
        
        mkdir -p "$wroot"
        
        # Track if branch exists remotely, otherwise create new
        if git show-ref --verify --quiet "refs/heads/$branch"; then
          git worktree add "$target" "$branch"
        elif git ls-remote --exit-code --heads origin "$branch" &>/dev/null; then
          git worktree add "$target" "origin/$branch"
        else
          git worktree add -b "$branch" "$target"
        fi
        
        echo "‚úÖ Worktree created: $target (branch: $branch)"
        git worktree list
        
        # ÁßªÂãïÁî®„Ç≥„Éû„É≥„Éâ„ÇíË°®Á§∫
        echo ""
        echo "üìÅ Êñ∞„Åó„ÅÑ„Éá„Ç£„É¨„ÇØ„Éà„É™„Å´ÁßªÂãï„Åô„Çã„Å´„ÅØ:"
        echo "cd \"$target\""
        ;;
      2)
        # worktree „Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÂ≠òÂú®„Åô„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
        [[ -d "$wroot" ]] || { echo "‚ùå worktree „Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì: $wroot"; exit 1; }
        
        # Find maximum number
        max_num=0
        for dir in "$wroot"/*; do
          [[ -d "$dir" ]] || continue
          num=$(basename "$dir")
          [[ "$num" =~ ^[0-9]+$ ]] && ((num > max_num)) && max_num=$num
        done
        [[ $max_num -eq 0 ]] && { echo "‚ùå No removable worktree found"; exit 1; }
        
        target="$wroot/$max_num"
        git worktree remove "$target"
        echo "‚úÖ Worktree removed: $target"
        git worktree list
        ;;
      *)
        echo "‚ùå Invalid selection"
        exit 1
        ;;
    esac
    ;;
  *)
    # Unknown subcommand
    echo "‚ùå Unknown subcommand: $command"
    usage
    ;;
esac

